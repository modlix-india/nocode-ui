import { StylePropertyDefinition } from '../../types/common';

export const styleProperties: Array<StylePropertyDefinition> = [
	{
		n: 'galleryBackgroundColor',
		cp: 'background-color',
		dn: 'Gallery background color',
		de: 'The background color of Gallery.',
		dv: 'rgb(24 24 27 / 80%)',
		sel: ' ',
	},
	{
		n: 'backdropFilter',
		dn: 'backdrop filter',
		de: 'The backdrop filter of the Modal.',
		dv: '1px',
	},
	{
		n: 'previewBackgroundColor',
		cp: 'background-color',
		dn: 'Preview background color',
		de: 'The background color of Preview.',
		dv: '<lightFontColor>',
		sel: '._previewContainer',
	},
	{
		n: 'previewListGap',
		cp: 'gap',
		dn: 'Preview list Gap',
		de: 'The gap between preview list images.',
		dv: '8px',
		sel: '._previewList',
	},
	{
		n: 'previewListMarginWhenRightOrLeft',
		cp: 'margin',
		dn: 'Preview List Margin when position Right or Left',
		de: 'The margin of preview list when position is Right or Left.',
		dv: '22px 12px',
		sel: '._previewList',
	},
	{
		n: 'previewListMarginWhenBottom',
		cp: 'margin',
		dn: 'Preview List Margin when position Bottom',
		de: 'The margin of preview list when position Bottom.',
		dv: '-22px auto 16px',
		sel: '._previewList._Bottom',
	},
	{
		n: 'previewListMarginWhenTop',
		cp: 'margin',
		dn: 'Preview List Margin when position Top',
		de: 'The margin of preview list when position Top.',
		dv: '-22px auto 16px',
		sel: '._previewList._Top',
	},
	{
		n: 'previewImageDivWidthWhenRightOrLeft',
		cp: 'width',
		dn: 'Preview Image Div Width when position Right or Left',
		de: 'The width of preview Image Div when position Right or Left.',
		dv: '80px',
		sel: '._previewImageDiv',
	},
	{
		n: 'previewImageDivHeightWhenRightOrLeft',
		cp: 'height',
		dn: 'Preview Image Div Height when position Right or Left',
		de: 'The Height of preview Image div when position Right or Left.',
		dv: '100px',
		sel: '._previewImageDiv',
	},
	{
		n: 'previewImageDivBorder',
		cp: 'border',
		dn: 'Preview Image Div Border',
		de: 'The Border of preview Image Div.',
		dv: '2px solid grey',
		sel: '._previewImageDiv',
	},
	{
		n: 'previewImageDivBorderWhenSelected',
		cp: 'border',
		dn: 'Preview Image Div Border When Selected',
		de: 'The Border of preview Image Div When Selected.',
		dv: '2px solid blue',
		sel: '._previewImageDiv._selected',
	},
	{
		n: 'previewImageDivBorderRadius',
		cp: 'border-radius',
		dn: 'Preview Image Div Border Radius',
		de: 'The border radius of preview Image Div.',
		dv: '4px',
		sel: '._previewImageDiv',
	},
	{
		n: 'previewImageDivWidthWhenTop',
		cp: 'width',
		dn: 'Preview Image Div Width when position Top',
		de: 'The width of preview Image Div when position Top.',
		dv: '100px',
		sel: '._previewImageDiv._Top',
	},
	{
		n: 'previewImageDivHeightWhenTop',
		cp: 'height',
		dn: 'Preview Image Div Height when position Top',
		de: 'The Height of preview Image Div when position Top.',
		dv: '80px',
		sel: '._previewImageDiv._Top',
	},
	{
		n: 'previewImageDivWidthWhenBottom',
		cp: 'width',
		dn: 'Preview Image Div Width when position Bottom',
		de: 'The width of preview Image Div when position Bottom.',
		dv: '100px',
		sel: '._previewImageDiv._Bottom',
	},
	{
		n: 'previewImageDivHeightWhenBottom',
		cp: 'height',
		dn: 'Preview Image Div Height when position Bottom',
		de: 'The Height of preview Image Div when position Bottom.',
		dv: '80px',
		sel: '._previewImageDiv._Bottom',
	},
	{
		n: 'previewImageBorderRadius',
		cp: 'border-radius',
		dn: 'Preview Image Border Radius',
		de: 'The border of preview Image.',
		dv: '3px',
		sel: '._previewImage',
	},
	{
		n: 'previewImageObjectFit',
		cp: 'object-fit',
		dn: 'Preview Image Border Radius',
		de: 'The border of preview Image.',
		dv: 'cover',
		sel: '._previewImage',
	},
	{
		n: 'previewCloseIconMargin',
		cp: 'margin',
		dn: 'Preview Image Border Radius',
		de: 'The border of preview Image.',
		dv: '10px 14px;',
		sel: '._previewCloseIcon',
	},
	{
		n: 'previewCloseIconFontSize',
		cp: 'font-size',
		dn: 'Preview Image Border Radius',
		de: 'The border of preview Image.',
		dv: '24px;',
		sel: '._previewCloseIcon i',
	},
	{
		n: 'galleryToolbarRightColumnGap',
		cp: 'gap',
		dn: 'Gallery Toolbar Right Column Gap',
		de: 'The gap between items of gallery Toolbar Right Column.',
		dv: '20px',
		sel: '._galleryToolbar ._rightColumn',
	},
	{
		n: 'galleryToolbarRightColumnPadding',
		cp: 'padding',
		dn: 'Gallery Toolbar Right Column Padding',
		de: 'The padding of gallery Toolbar Right Column.',
		dv: '10px 12px',
		sel: '._galleryToolbar ._rightColumn',
	},
	{
		n: 'galleryToolbarRightColumnBackgroundColor',
		cp: 'background-color',
		dn: 'Gallery Toolbar Right Column Background Color',
		de: 'The Background Color of gallery Toolbar Right Column.',
		dv: 'rgb(24 24 27 / 50%)',
		sel: '._galleryToolbar ._rightColumn',
	},
	{
		n: 'galleryToolbarRightColumnIconColor',
		cp: 'color',
		dn: 'Gallery Toolbar Right Column Color',
		de: 'The Color of gallery Toolbar Right Column.',
		dv: '<lightFontColor>',
		sel: '._galleryToolbar ._rightColumn i',
	},
	{
		n: 'galleryToolbarRightColumnIconWidth',
		cp: 'width',
		dn: 'Gallery Toolbar Right Column Width',
		de: 'The widht of gallery Toolbar Right Column.',
		dv: '24px',
		sel: '._galleryToolbar ._rightColumn i',
	},
	{
		n: 'galleryToolbarRightColumnIconFontSize',
		cp: 'font-size',
		dn: 'Gallery Toolbar Right Column Font Size',
		de: 'The Font Size of gallery Toolbar Right Column.',
		dv: '24px',
		sel: '._galleryToolbar ._rightColumn i',
	},
	{
		n: 'galleryToolbarLeftColumnColor',
		cp: 'color',
		dn: 'Gallery Toolbar Left Column Color',
		de: 'The Color of gallery Toolbar Left Column.',
		dv: '<lightFontColor>',
		sel: '._galleryToolbar ._leftColumn',
	},
	{
		n: 'galleryToolbarLeftColumnMargin',
		cp: 'margin',
		dn: 'Gallery Toolbar Left Column Width',
		de: 'The widht of gallery Toolbar Left Column.',
		dv: '0 12px',
		sel: '._galleryToolbar ._leftColumn',
	},
	{
		n: 'galleryToolbarLeftColumnFontSize',
		cp: 'font-size',
		dn: 'Gallery Toolbar Right Column Font Size',
		de: 'The Font Size of gallery Toolbar Right Column.',
		dv: '18px',
		sel: '._galleryToolbar ._leftColumn',
	},
	{
		n: 'thumbnailContainerGap',
		cp: 'gap',
		dn: 'Thumbnail Container Gap',
		de: 'The Gap between items in Thumbnail Container.',
		dv: '8px',
		sel: '._thumbnailContainer',
	},
	{
		n: 'thumbnailContainerMaxHeightWhenTopOrBottom',
		cp: 'max-height',
		dn: 'Thumbnail Container Max Height when position Top or Bottom',
		de: 'The Max Height of Thumbnail Container when position Top or Bottom.',
		dv: '90px',
		sel: '._thumbnailContainer',
	},
	{
		n: 'thumbnailContainerwidthWhenTopOrBottom',
		cp: 'width',
		dn: 'Thumbnail Container Width when position Top or Bottom',
		de: 'The Width of Thumbnail Container when position Top or Bottom.',
		dv: '80%',
		sel: '._thumbnailContainer',
	},
	{
		n: 'thumbnailContainerMarginWhenBottom',
		cp: 'margin',
		dn: 'Thumbnail Container Margin when position Bottom',
		de: 'The Margin of Thumbnail Container when position Bottom.',
		dv: '8px auto',
		sel: '._thumbnailContainer',
	},
	{
		n: 'thumbnailContainerMarginWhenTop',
		cp: 'margin',
		dn: 'Thumbnail Container Margin when position Top',
		de: 'The Margin of Thumbnail Container when position Top.',
		dv: '50px auto 8px auto',
		sel: '._thumbnailContainer._thumbnailTop',
	},
	{
		n: 'thumbnailContainerMarginWhenRight',
		cp: 'margin',
		dn: 'Thumbnail Container Margin when position Right',
		de: 'The Margin of Thumbnail Container when position Right.',
		dv: '0 10px;',
		sel: '._thumbnailContainer._thumbnailRight',
	},
	{
		n: 'thumbnailContainerMarginWhenLeft',
		cp: 'margin',
		dn: 'Thumbnail Container Margin when position Left',
		de: 'The Margin of Thumbnail Container when position Left.',
		dv: '0 10px',
		sel: '._thumbnailContainer._thumbnailLeft',
	},
	{
		n: 'thumbnailContainerHeightWhenRight',
		cp: 'height',
		dn: 'Thumbnail Container Height when position Right',
		de: 'The Height of Thumbnail Container when position Right.',
		dv: '80%',
		sel: '._thumbnailContainer._thumbnailRight',
	},
	{
		n: 'thumbnailContainerHeightWhenLeft',
		cp: 'height',
		dn: 'Thumbnail Container Height when position Left',
		de: 'The Height of Thumbnail Container when position Left.',
		dv: '80%',
		sel: '._thumbnailContainer._thumbnailLeft',
	},
	{
		n: 'thumbnailContainerMaxWidthWhenRight',
		cp: 'max-width',
		dn: 'Thumbnail Container Max Width when position Right',
		de: 'The Max Width of Thumbnail Container when position Right.',
		dv: '140px',
		sel: '._thumbnailContainer._thumbnailRight',
	},
	{
		n: 'thumbnailContainerMaxWidthWhenLeft',
		cp: 'max-width',
		dn: 'Thumbnail Container Max Width when position Left',
		de: 'The Max Width of Thumbnail Container when position Left.',
		dv: '140px',
		sel: '._thumbnailContainer._thumbnailLeft',
	},
	{
		n: 'thumbnailImageDivHeight',
		cp: 'height',
		dn: 'Thumbnail Image Div Height',
		de: 'The Height of Thumbnail Image Div.',
		dv: '80px',
		sel: '._thumbnailImageDiv',
	},
	{
		n: 'thumbnailImageDivWidth',
		cp: 'width',
		dn: 'Thumbnail Image Div Width',
		de: 'The Width of Thumbnail Image Div.',
		dv: '120px',
		sel: '._thumbnailImageDiv',
	},
	{
		n: 'thumbnailImageDivBorder',
		cp: 'border',
		dn: 'Thumbnail Image Div Border',
		de: 'The Border of Thumbnail Image Div.',
		dv: '1px solid grey',
		sel: '._thumbnailImageDiv',
	},
	{
		n: 'thumbnailImageDivBorderRadius',
		cp: 'border-radius',
		dn: 'Thumbnail Image Div Border Radius',
		de: 'The Border Radius of Thumbnail Image Div.',
		dv: '4px',
		sel: '._thumbnailImageDiv',
	},
	{
		n: 'thumbnailImageBorderRadius',
		cp: 'border-radius',
		dn: 'Thumbnail Image Border Radius',
		de: 'The border of Thumbnail Image.',
		dv: '3px',
		sel: '._thumbnailImage',
	},
	{
		n: 'thumbnailImageObjectFit',
		cp: 'object-fit',
		dn: 'Thumbnail Image Border Radius',
		de: 'The border of Thumbnail Image.',
		dv: 'cover',
		sel: '._thumbnailImage',
	},
	{
		n: 'slideImageObjectFit',
		cp: 'object-fit',
		dn: 'Slide Image Border Radius',
		de: 'The border of Slide Image.',
		dv: 'cover',
		sel: '._slideImage',
	},
	{
		n: 'arrowButtonContainerPadding',
		cp: 'padding',
		dn: 'Arrow Button Container Padding',
		de: 'The padding of Arrow Button Container.',
		dv: '0 10px',
		sel: '._arrowButtonsContainer',
	},
	{
		n: 'arrowButtonColor',
		cp: 'color',
		dn: 'Arrow Button Container Color',
		de: 'The Color of Arrow Button.',
		dv: '<lightFontColor>',
		sel: '._button',
	},
	{
		n: 'arrowButtonFontSize',
		cp: 'font-size',
		dn: 'Arrow Button Container Font Size',
		de: 'The Font Size of Arrow Button.',
		dv: '50px',
		sel: '._button',
	},
];

export const styleDefaults = new Map<string, string>(
	styleProperties
		.filter(e => !!e.dv)
		.map(({ n: name, dv: defaultValue }) => [name, defaultValue!]),
);
