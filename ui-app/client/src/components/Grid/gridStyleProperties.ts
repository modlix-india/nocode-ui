import { StyleGroupDefinition, StylePropertyDefinition } from '../../types/common';

export const styleProperties: Array<StylePropertyDefinition> = [
	{
		n: 'gridPaddingLeft',
		cp: 'padding-left',
		dn: 'Grid Left padding',
		de: 'Left padding for grid.',
		sel: '.comp.compGrid._noAnchorGrid',
	},
	{
		n: 'gridPaddingRight',
		cp: 'padding-right',
		dn: 'Grid Right padding',
		de: 'Right padding for grid.',
		sel: '.comp.compGrid._noAnchorGrid',
	},
	{
		n: 'gridPaddingTop',
		cp: 'padding-top',
		dn: 'Grid Top padding',
		de: 'Top padding for grid.',
		sel: '.comp.compGrid._noAnchorGrid',
	},
	{
		n: 'gridPaddingBottom',
		cp: 'padding-bottom',
		dn: 'Grid Bottom padding',
		de: 'Bottom padding for grid.',
		sel: '.comp.compGrid._noAnchorGrid',
	},
	{
		n: 'anchoredGridPaddingLeft',
		cp: 'padding-left',
		dn: 'Grid Left padding',
		de: 'Left padding for grid.',
		sel: '.comp.compGrid ._anchorGrid',
	},
	{
		n: 'anchoredGridPaddingRight',
		cp: 'padding-right',
		dn: 'Grid Right padding',
		de: 'Right padding for grid.',
		sel: '.comp.compGrid ._anchorGrid',
	},
	{
		n: 'anchoredGridPaddingTop',
		cp: 'padding-top',
		dn: 'Grid Top padding',
		de: 'Top padding for grid.',
		sel: '.comp.compGrid ._anchorGrid',
	},
	{
		n: 'anchoredGridPaddingBottom',
		cp: 'padding-bottom',
		dn: 'Grid Bottom padding',
		de: 'Bottom padding for grid.',
		sel: '.comp.compGrid ._anchorGrid',
	},
	{
		n: 'gapBetween',
		cp: 'gap',
		dn: 'Gap between children',
		de: 'Gap between children of grid.',
		dv: '5px',
		sel: '.comp.compGrid ._anchorGrid, .comp.compGrid._noAnchorGrid',
	},
	{
		gn: 'Border',
		dn: 'Border Light',
		n: 'borderLight',
		dv: '1px solid',
		cp: 'border',
		sel: '._LIGHT',
	},
	{
		gn: 'Border',
		dn: 'Border Medium',
		n: 'borderMedium',
		dv: '3px solid',
		cp: 'border',
		sel: '._MEDIUM',
	},
	{
		gn: 'Border',
		dn: 'Border High',
		n: 'borderHigh',
		dv: '5px solid',
		cp: 'border',
		sel: '._HEAVY',
	},
	{
		gn: 'Border',
		dn: 'Border Extreme',
		n: 'borderExtreme',
		dv: '8px solid',
		cp: 'border',
		sel: '._EXTREME',
	},
	{
		gn: 'Border',
		dn: 'Border Ultra',
		n: 'borderUltra',
		dv: '10px solid',
		cp: 'border',
		sel: '._ULTRA',
	},
	{
		gn: 'Border',
		dn: 'Border Maximum',
		n: 'borderMaximum',
		dv: '12px solid',
		cp: 'border',
		sel: '._MAXIMUM',
	},

	{
		gn: 'Border Radius',
		dn: 'Border Radius Straight',
		n: 'borderRadiusStraight',
		dv: '0px ',
		cp: 'border-radius',
		sel: '._STRAIGHT',
	},
	{
		gn: 'Border Radius',
		dn: 'Border Radius Slight Round',
		n: 'borderRadiusSlightRound',
		dv: '5px',
		cp: 'border-radius',
		sel: '._SLIGHTROUND',
	},
	{
		gn: 'Border Radius',
		dn: 'Border Radius Round',
		n: 'borderRadiusRound',
		dv: '10px',
		cp: 'border-radius',
		sel: '._ROUND',
	},
	{
		gn: 'Border Radius',
		dn: 'Border Radius Extra Round',
		n: 'borderRadiusExtraRound',
		dv: '15px',
		cp: 'border-radius',
		sel: '._EXTRAROUND',
	},
	{
		gn: 'Border Radius',
		dn: 'Border Radius Very Round',
		n: 'borderRadiusVeryRound',
		dv: '20px ',
		cp: 'border-radius',
		sel: '._VERYROUND',
	},
	{
		gn: 'Border Radius',
		dn: 'Border Radius Full Round',
		n: 'borderRadiusFullRound',
		dv: '30px',
		cp: 'border-radius',
		sel: '._FULLROUND',
	},

	{
		gn: 'Box Shadow',
		dn: 'Box Shadow DarkLow',
		n: 'boxShadowDarkLow',
		dv: '0px 3px 10px 0px rgba(255, 255, 255, 0.10)',
		cp: 'box-shadow',
		sel: '._DARKLOW',
	},
	{
		gn: 'Box Shadow',
		dn: 'Box Shadow DarkMedium',
		n: 'boxShadowDarkMedium',
		dv: '0px 5px 20px 0px rgba(255, 255, 255, 0.20)',
		cp: 'box-shadow',
		sel: '._DARKMEDIUM',
	},
	{
		gn: 'Box Shadow',
		dn: 'Box Shadow DarkHigh',
		n: 'boxShadowDarkHigh',
		dv: '0px 5px 30px 0px rgba(255, 255, 255, 0.30)',
		cp: 'box-shadow',
		sel: '._DARKHIGH',
	},
	{
		gn: 'Box Shadow',
		dn: 'Box Shadow LightLow',
		n: 'boxShadowLightLow',
		dv: '0px 3px 10px 0px rgba(0, 0, 0, 0.10)',
		cp: 'box-shadow',
		sel: '._LIGHTLOW',
	},
	{
		gn: 'Box Shadow',
		dn: 'Box Shadow LightMedium',
		n: 'boxShadowLightMedium',
		dv: '0px 5px 20px 0px rgba(0, 0, 0, 0.20)',
		cp: 'box-shadow',
		sel: '._LIGHTMEDIUM',
	},
	{
		gn: 'Box Shadow',
		dn: 'Box Shadow LightHigh',
		n: 'boxShadowLightHigh',
		dv: '0px 5px 30px 0px rgba(0, 0, 0, 0.30)',
		cp: 'box-shadow',
		sel: '._LIGHTHIGH',
	},
	{
		gn: 'Padding',
		dn: 'Padding Design One',
		n: 'paddingDesignOne',
		dv: '10px 10px 10px 10px',
		cp: 'padding',
		sel: '._PADDINGONE',
	},
	{
		gn: 'Padding',
		dn: 'Padding Design Two',
		n: 'paddingDesignTwo',
		dv: '20px 20px 20px 20px',
		cp: 'padding',
		sel: '._PADDINGTWO',
	},
	{
		gn: 'Padding',
		dn: 'Padding Design Three',
		n: 'paddingDesignThree',
		dv: '30px 30px 30px 30px',
		cp: 'padding',
		sel: '._PADDINGTHREE',
	},
	{
		gn: 'Padding',
		dn: 'Padding Design Four',
		n: 'paddingDesignFour',
		dv: '40px 40px 40px 40px',
		cp: 'padding',
		sel: '._PADDINGFOUR',
	},
	{
		gn: 'Padding',
		dn: 'Padding Design Five',
		n: 'paddingDesignFive',
		dv: '50px 50px 50px 50px',
		cp: 'padding',
		sel: '._PADDINGFIVE',
	},
	{
		gn: 'Padding',
		dn: 'Padding Design Six',
		n: 'paddingDesignSix',
		dv: '60px 60px 60px 60px ',
		cp: 'padding',
		sel: '._PADDINGSIX',
	},
];

export const styleDefaults = new Map<string, string>(
	styleProperties
		.filter(e => !!e.dv)
		.map(({ n: name, dv: defaultValue }) => [name, defaultValue!]),
);
