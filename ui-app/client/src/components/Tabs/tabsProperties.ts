import { SCHEMA_STRING_COMP_PROP } from '../../constants';
import {
	ComponentPropertyDefinition,
	ComponentPropertyEditor,
	ComponentPropertyGroup,
	ComponentStylePropertyDefinition,
} from '../../types/common';
import { COMMON_COMPONENT_PROPERTIES, COMPONENT_STYLE_GROUP_PROPERTIES } from '../util/properties';

const propertiesDefinition: Array<ComponentPropertyDefinition> = [
	COMMON_COMPONENT_PROPERTIES.readOnly,
	COMMON_COMPONENT_PROPERTIES.visibility,
	{
		name: 'tabs',
		schema: SCHEMA_STRING_COMP_PROP,
		displayName: 'Tabs list',
		description: 'Tabs to be present on the component, an array of string in order.',
		group: ComponentPropertyGroup.BASIC,
		multiValued: true,
		defaultValue: [],
	},
	{
		name: 'defaultActive',
		schema: SCHEMA_STRING_COMP_PROP,
		displayName: 'Active tab name',
		description: 'Active default tab',
		group: ComponentPropertyGroup.BASIC,
	},
	{
		name: 'icon',
		schema: SCHEMA_STRING_COMP_PROP,
		displayName: 'Icon list',
		editor: ComponentPropertyEditor.ICON,
		description: "Icon's to be present on the component, comma seperated list of icons.",
		multiValued: true,
		group: ComponentPropertyGroup.BASIC,
		defaultValue: [],
	},
	{
		name: 'tabsOrientation',
		schema: SCHEMA_STRING_COMP_PROP,
		displayName: 'Tabs Orientation',
		description: 'Orientation of tabs',
		editor: ComponentPropertyEditor.ENUM,
		group: ComponentPropertyGroup.BASIC,
		defaultValue: '_horizontal',
		enumValues: [
			{ name: '_horizontal', displayName: 'Horizontal Tabs', description: 'Horizontal Tabs' },
			{
				name: '_vertical',
				displayName: 'Vertical Tabs',
				description: 'Vertical Tabs',
			},
		],
	},
	{
		name: 'tabNameOrientation',
		schema: SCHEMA_STRING_COMP_PROP,
		displayName: 'Tab Name Orientation',
		description: 'Orientation of tab and coponent',
		editor: ComponentPropertyEditor.ENUM,
		group: ComponentPropertyGroup.BASIC,
		defaultValue: '_horizontal',
		enumValues: [
			{ name: '_horizontal', displayName: 'Row Layout', description: 'Default row layout' },
			{
				name: '_vertical',
				displayName: 'Column Layout',
				description: 'Single Column layout in all resolutions',
			},
		],
	},
	{
		name: 'tabsPosition',
		schema: SCHEMA_STRING_COMP_PROP,
		displayName: 'Tabs Position',
		description: 'Position of tabs',
		editor: ComponentPropertyEditor.ENUM,
		group: ComponentPropertyGroup.ADVANCED,
		defaultValue: '_start',
		enumValues: [
			{ name: '_start', displayName: 'Start', description: 'Start' },
			{ name: '_center', displayName: 'Center', description: 'Center' },
			{ name: '_end', displayName: 'End', description: 'End' },
			{ name: '_spaceAround', displayName: 'Space Around', description: 'Space Around' },
			{ name: '_spaceBetween', displayName: 'Space Between', description: 'Space Between' },
			{ name: '_spaceEvenly', displayName: 'Space Evenly', description: 'Space Evenly' },
		],
	},
	{
		...COMMON_COMPONENT_PROPERTIES.designType,
		enumValues: [
			...COMMON_COMPONENT_PROPERTIES.designType.enumValues!,
			{
				name: '_line',
				displayName: 'Tab with line',
				description: 'Tab with line',
			},
			{
				name: '_highlight',
				displayName: 'Tab with highlight',
				description: 'Tab with highlight',
			},
			{
				name: '_underLine',
				displayName: 'Tab with underline',
				description: 'Tab with underline',
			},
		],
	},
	{
		name: 'onTabChange',
		schema: SCHEMA_STRING_COMP_PROP,
		displayName: 'On Tab Change',
		editor: ComponentPropertyEditor.EVENT_SELECTOR,
		description: 'Event to be triggered when a tab clicked.',
		group: ComponentPropertyGroup.EVENTS,
	},

	COMMON_COMPONENT_PROPERTIES.colorScheme,
];
const stylePropertiesDefinition: ComponentStylePropertyDefinition = {
	'': [
		COMPONENT_STYLE_GROUP_PROPERTIES.layout.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.position.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.spacing.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.typography.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.border.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.size.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.effects.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.background.type,
	],
	tabsContainer: [
		COMPONENT_STYLE_GROUP_PROPERTIES.layout.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.position.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.spacing.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.typography.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.border.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.size.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.effects.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.background.type,
	],
	tab: [
		COMPONENT_STYLE_GROUP_PROPERTIES.layout.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.position.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.spacing.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.typography.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.border.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.size.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.effects.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.background.type,
	],
	tabHighlighter: [
		COMPONENT_STYLE_GROUP_PROPERTIES.layout.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.position.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.spacing.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.typography.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.border.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.size.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.effects.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.background.type,
	],
	childContainer: [
		COMPONENT_STYLE_GROUP_PROPERTIES.layout.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.position.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.spacing.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.typography.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.border.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.size.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.effects.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.background.type,
	],
	icon: [
		COMPONENT_STYLE_GROUP_PROPERTIES.spacing.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.typography.type,
	],
	tabsSeperator: [
		COMPONENT_STYLE_GROUP_PROPERTIES.layout.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.position.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.spacing.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.border.type,
		COMPONENT_STYLE_GROUP_PROPERTIES.size.type,
	],
};

export { propertiesDefinition, stylePropertiesDefinition };
