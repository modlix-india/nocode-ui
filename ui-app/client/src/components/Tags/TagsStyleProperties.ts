import { StylePropertyDefinition } from '../../types/common';

export const styleProperties: Array<StylePropertyDefinition> = [
	{
		n: 'tagBorderRadius',
		cp: 'border-radius',
		dn: 'border radius of the Tag',
		de: "The Tag's border radius.",
		dv: '2px',
		sel: '.container',
	},
	{
		n: 'tagBorder',
		cp: 'border',
		dn: 'Tag border',
		de: "The Tag's border.",
		dv: '1px solid #c7c8d6',
		sel: '.container',
	},
	{
		n: 'tagBorderOnHover',
		cp: 'border',
		dn: 'Tag border - Hover',
		de: "The Tag's border color on hover.",
		sel: '.container:hover',
	},
	{
		n: 'tagHeight',
		cp: 'height',
		dn: 'height style of the Tag',
		de: "The Tag's height.",
		dv: '32px',
		sel: '.container',
	},
	{
		n: 'tagMaxWidth',
		cp: 'max-width',
		dn: 'max width style of the Tag',
		de: 'The Max width of the tag.',
		dv: '100px',
		sel: '.container',
	},
	{
		n: 'tagBackgroundColor',
		cp: 'background-color',
		dn: 'background color of the Tag',
		de: "The Tag's background color.",
		sel: '.container',
	},
	{
		n: 'tagBackgroundColorHover',
		cp: 'background-color',
		dn: 'Tag background color - Hover',
		de: "The Tag's background color on hover.",
		sel: '.container:hover',
	},
	{
		n: 'tagFontSize',
		cp: 'font-size',
		dn: 'Tag font size',
		de: "The Tag's label font size.",
		sel: '.iconCss',
	},
	{
		n: 'tagIconColor',
		cp: 'color',
		dn: 'icon color of the Tag',
		de: "The Tag's icon color.",
		sel: '.iconCss',
	},
	{
		n: 'tagIconColorHover',
		cp: 'color',
		dn: 'Tag icon color - hover',
		de: "The Tag's icon color on hover.",
		sel: '.iconCss:hover',
	},
	{
		n: 'closeIconColor',
		cp: 'color',
		dn: 'close icon color of the Tag',
		de: "The Tag's close icon color.",
		sel: '.closeButton',
	},
	{
		n: 'closeIconColorHover',
		cp: 'color',
		dn: 'Tag close icon - hover',
		de: "The Tag's close icon color on hover.",
		sel: '.closeButton:hover',
	},
	{
		n: 'closeIconSize',
		cp: 'font-size',
		dn: 'Close icon size',
		de: "The Tag's size of close icon.",
		sel: '.closeButton',
	},
	{
		n: 'labelFontSize',
		cp: 'font-size',
		dn: 'Label font size',
		de: 'Label font size.',
		sel: '.text',
	},
	{
		n: 'iconSize',
		cp: 'font-size',
		dn: "Icon's size",
		de: 'The size of icon.',
		sel: '.iconCss',
	},
	{
		n: 'labelColor',
		cp: 'color',
		dn: 'Label color',
		de: "The Tag's label label color.",
		sel: '.text',
	},
	{
		n: 'labelColorHover',
		cp: 'color',
		dn: 'Label color - Hover',
		de: "The Tag's label label color on hover.",
		sel: '.text:hover',
	},
	{
		n: 'Outerlabel',
		cp: 'color',
		dn: 'Outer Label color ',
		de: "The Tag's outer label color.",
		sel: '.label',
		dv: '#393A3C',
	},
	{
		n: 'inputHeight',
		cp: 'height',
		dn: 'Height of input box ',
		de: 'The input box height.',
		sel: '.input',
		dv: '30px',
	},
	{
		n: 'inputPadding',
		cp: 'padding-left',
		dn: 'Left padding of input box ',
		de: 'The input box left padding.',
		sel: '.input',
		dv: '7px',
	},
	{
		n: 'inputBorder',
		cp: 'border',
		dn: 'border of input box ',
		de: 'The input box border.',
		sel: '.input',
		dv: 'none',
	},
	{
		n: 'inputBorderRadius',
		cp: 'border-radius',
		dn: 'border radius of input box ',
		de: 'The input box border radius.',
		sel: '.input',
		dv: '4px',
	},
	{
		n: 'tagContainerWithInputFlexDirection',
		cp: 'flex-direction',
		dn: 'Flex direction of container with input',
		de: 'Flex direction of container with input.',
		sel: '.tagcontainerWithInput',
		dv: 'row',
	},
	{
		n: 'tagContainerWithInputMaxHeight',
		cp: 'max-height',
		dn: 'Max height of tag container with input',
		de: 'The max height of tag container with input.',
		sel: '.tagcontainerWithInput',
		dv: '200px',
	},
	{
		n: 'containerWithInputPadding',
		cp: 'padding',
		dn: 'padding of container with input',
		de: 'The padding of container with input.',
		sel: '.tagcontainerWithInput',
		dv: '4px',
	},
	{
		n: 'outerContainerBorderWithInput',
		cp: 'border',
		dn: 'border of outer container with input',
		de: 'The border of outer container with input.',
		sel: '.containerWithInput',
		dv: '1px solid #393A3C',
	},
	{
		n: 'outerContainerBorderRadiusWithInput',
		cp: 'border-radius',
		dn: 'border radius of outer container with input',
		de: 'The border radius of outer container with input.',
		sel: '.containerWithInput',
		dv: '4px',
	},
	{
		n: 'outerContainerBackgroundColorWithInput',
		cp: 'background-color',
		dn: 'background color of outer container with input',
		de: 'The background color of outer container with input.',
		sel: '.containerWithInput',
		dv: '',
	},
];

export const styleDefaults = new Map<string, string>(
	styleProperties
		.filter(e => !!e.dv)
		.map(({ n: name, dv: defaultValue }) => [name, defaultValue!]),
);
