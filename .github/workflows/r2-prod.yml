name: Cloudflare R2 - Prod

on:
  #To trigger manually
  workflow_dispatch:
  push:
    branches: [cf-production]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: cf-production
      - name: Setting up node
        uses: actions/setup-node@v4
        with:
          node-version: 21.7.3
      - name: Install Dependencies
        working-directory: ./ui-app/client
        run: npm i
      - name: Setup rClone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.CLOUDFLARE_RCLONE_CONFIG }}
      - uses: cloudposse/github-action-jq@main
        name: Installing jq
        with:
          compact: true
          input: '["test", "test2", "test3"]'
          script: |-
            map(select(. == "test"))
      - name: Building to JS
        working-directory: ./ui-app/client
        run: npm run cf-prod
      - name: Pushing Prod to Cloudflare
        working-directory: ./ui-app/client
        run: |
          rclone copy ./dist r2user:prod-static/js/dist

          echo "\n"
          echo "JSON prepared :"
          find dist -type f | xargs -d '\n' -n 25 | while IFS= read -r batch; do echo "$batch" | tr ' ' '\n' | jq -R -s '{"files": split("\n")[:-1] | map("https://cdn.modlix.com/js/" + .)}'; done

          echo "Calling purge for cdn.modlix.com :"
          find dist -type f | xargs -d '\n' -n 25 | while IFS= read -r batch; do echo "$batch" | tr ' ' '\n' | jq -R -s '{"files": split("\n")[:-1] | map("https://cdn.modlix.com/js/" + .)}' | curl https://api.cloudflare.com/client/v4/zones/f8fe46c016fcfdc188401768a0ac7d01/purge_cache --request POST --header "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" --header "Content-Type: application/json"  --data @- ; echo ""; done

      - name: Invalidating Application Server cache
        run: |
          curl -s --header "Authorization: ${{ secrets.NOCODE_TOKEN }}" https://apps.modlix.com/api/ui/newdeployment
